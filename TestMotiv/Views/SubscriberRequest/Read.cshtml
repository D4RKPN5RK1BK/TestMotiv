@using TestMotiv.DTO

@model PageResultDto<SubscriberRequestFilterDto, SubscriberRequestDto>

<h2>Обращения абонентов</h2>
<div class="row">
    <div class="col-sm-3">
        <form method="get">
            <div class="form-group">
                @Html.LabelFor(i => i.Filter.CountryName)
                @Html.TextBoxFor(i => i.Filter.CountryName, new {@class = "form-control"})
            </div>
            <div class="form-group">
                @Html.LabelFor(i => i.Filter.RegionName)
                @Html.TextBoxFor(i => i.Filter.CountryName, new {@class = "form-control"})
            </div>
            <div class="form-group">
                @Html.LabelFor(i => i.Filter.CityName)
                @Html.TextBoxFor(i => i.Filter.CountryName, new {@class = "form-control"})
            </div>
            <div class="form-group">
                @Html.LabelFor(i => i.Filter.Phone)
                @Html.TextBoxFor(i => i.Filter.CountryName, new {@class = "form-control"})
            </div>
            <div class="form-group">
                @Html.LabelFor(i => i.Filter.RequestReasonId)
                @Html.HiddenFor(i => i.Filter.RequestReasonId)
                @Html.DropDownListFor(i => i.Filter.RequestReasonId, new SelectList(new List<KeyValuePair<string, string>>()), new {@class = "form-control"})
            </div>
            <div class="form-group">
                <input type="submit" value="Отфильтровать" class="form-control">
            </div>
        </form>
        @Html.ActionLink("Добавить", "Create", "SubscriberRequest", null, new {@class = "btn btn-success btn-block"})
    </div>
    <div class="col-sm-9">
        @Html.Partial("Components/Pagination", new PaginationDto
            {
                Total = Model.Total,
                PageData = Model.PageData,
                FilterDict = new Dictionary<string, string>
                {
                    {nameof(Model.Filter.Phone), Model?.Filter?.Phone ?? string.Empty},
                    {nameof(Model.Filter.CountryName), Model?.Filter?.CountryName},
                    {nameof(Model.Filter.CityName), Model?.Filter?.CityName},
                    {nameof(Model.Filter.RegionName), Model?.Filter?.RegionName},
                    {nameof(Model.Filter.RequestReasonId), Model?.Filter?.RequestReasonId.ToString()},
                }
            })
        <table class="table">
            <thead>
            <tr>
                <th>Страна</th>
                <th>Регион</th>
                <th>Населенный пункт</th>
                <th>Номер абонента</th>
                <th>Причина обращения</th>
                <th></th>
                <th></th>
            </tr>
            </thead>
            @foreach (var item in Model.Items)
            {
                <tr>
                    <td>@item.CountryName</td>
                    <td>@item.RegionName</td>
                    <td>@item.CityName</td>
                    <td>@item.Phone</td>
                    <td>@item.RequestReasonName</td>
                    <td>
                         @Html.ActionLink("Изменить", "Update", "SubscriberRequest", new {id = item.Id}, new {@class = "btn btn-primary btn-block"})
                    </td>
                    <td>
                        <button type="button" data-action="delete" value="@item.Id" class="btn btn-danger">Удалить</button>
                    </td>
                </tr>
            }
        </table>
    </div>
</div>

@section scripts
{
    <script >
        $(() => {
            const requestReasonSelector = '#@($"{nameof(Model.Filter)}_{nameof(SubscriberRequestDto.RequestReasonId)}")';
            const requestReasonUrl = '@Url.Action("List", "RequestReason")';
            const requestReasonValue = '@Model.Filter.RequestReasonId';
            setDropDownValue(requestReasonSelector, requestReasonUrl, requestReasonValue);
            
            const deleteButtonSelector = 'button[data-action="delete"]';
            const deleteUrl = '@Url.Action("Delete")';
            setClickHandler(deleteButtonSelector, (e) => {
                ajaxDelete(`${deleteUrl}/${$(e).val()}`, () => {
                   location.reload(); 
                });
            });
        })
    </script>
}
