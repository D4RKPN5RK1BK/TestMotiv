@using TestMotiv.DTO
@model PaginationDto
@{
    var filterUri = Model.FilterDictAsUrl;
    var pageSizeUri = $"{nameof(Model.PageData)}.{nameof(Model.PageData.PageSize)}={Model.PageData.PageSize}";
    var currentPageUri = $"{nameof(Model.PageData)}.{nameof(Model.PageData.CurrentPage)}={{0}}";
    var uriParts = new List<string>
    {
        filterUri,
        pageSizeUri,
        currentPageUri
    }
        .Where(i => !string.IsNullOrEmpty(i))
        .ToArray();
    var pageUri = $"?{string.Join("&", uriParts)}";
}
<nav aria-label="Page navigation">
    <ul class="pagination">
        @if (Model.HasPreviousPage)
        {
            <li>
                <a href="@string.Format(pageUri, 1)">&laquo;</a>
            </li>
            <li>
                <a href="@string.Format(pageUri, Model.PageData.CurrentPage - 1)"><</a>
            </li>    
        }
        
        @for (int i = Model.PageData.CurrentPage > 4 ? Model.PageData.CurrentPage - 4 : 1; i <= (Model.PageData.CurrentPage < Model.TotalPages - 4 ? Model.PageData.CurrentPage + 4 : Model.TotalPages); i++)
        {
            if (i == Model.PageData.CurrentPage)
            {
                <li class="active"><a href="@string.Format(pageUri, i)"> @i <span class="sr-only">(current)</span></a></li>
            }
            else
            {
                <li>
                    <a href="@string.Format(pageUri, i)">@i</a>
                </li>
            }
        }
    
        @if (Model.HasNextPage)
        { 
            <li>
                <a href="@string.Format(pageUri, Model.PageData.CurrentPage + 1)">></a>
            </li>
            <li>
                <a href="@string.Format(pageUri, Model.TotalPages)">&raquo;</a>
            </li>  
        } 
    </ul>
</nav>


